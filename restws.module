<?php
// $Id$

/**
 * @file
 * RESTful web services module.
 */

/**
 * Returns info about all defined resources.
 */
function restws_get_resource_info() {
  $info = &drupal_static(__FUNCTION__);
  if (!isset($info)) {
    $info = module_invoke_all('restws_resource_info');
    drupal_alter('restws_resource_info', $info);
  }
  return $info;
}

/**
* Implementation of hook_ctools_plugin_api().
*/
function restws_ctools_plugin_api($module, $api) {
  if ($module == 'services' && $api == 'services') {
    return array('version' => 3);
  }
}

/**
 * Implements hook_services_resources().
 */
function restws_services_resources() {
  foreach (entity_get_info() as $entity_type => $info) {
    $result['restws_' . $entity_type] = _restws_resource_definition($entity_type);
  }
  return $result;
}

function _restws_resource_definition($entity_type) {
  $entity_arg = array(
    'name' => 'entity_type',
    'type' => 'string',
    'default value' => $entity_type,
    'description' => 'The type of the entity',
  );
  $base = array(
    'access callback' => '_restws_resource_access',
    'access arguments append' => TRUE,
  );

  return array(
    'retrieve' => array(
      'callback' => '_restws_resource_retrieve',
      'access arguments' => array('view'),
      'args' => array(
        $entity_arg,
        array(
          'name' => 'id',
          'optional' => FALSE,
          'source' => array('path' => 0),
          'type' => 'int',
          'description' => 'The id of the entity',
        ),
      ),
    ) + $base,
    'create' => array(
      'callback' => '_restws_resource_create',
      'access arguments' => array('create'),
      'args' => array(
        $entity_arg,
        array(
          'name' => 'values',
          'optional' => FALSE,
          'source' => 'data',
          'description' => 'The entity object to create',
          'type' => 'struct',
        ),
      ),
    ) + $base,
    'update' => array(
      'callback' => '_restws_resource_update',
      'access arguments' => array('update'),
      'args' => array(
        $entity_arg,
        array(
          'name' => 'id',
          'optional' => FALSE,
          'source' => array('path' => 0),
          'type' => 'int',
          'description' => 'The id of the entity',
        ),
        array(
          'name' => 'values',
          'optional' => FALSE,
          'source' => 'data',
          'description' => 'The entity object to update',
          'type' => 'struct',
        ),
      ),
    ) + $base,
    'delete' => array(
      'callback' => '_restws_resource_delete',
      'access arguments' => array('delete'),
      'args' => array(
        $entity_arg,
        array(
          'name' => 'id',
          'optional' => FALSE,
          'source' => array('path' => 0),
          'type' => 'int',
          'description' => 'The id of the entity',
        ),
      ),
    ) + $base,
  );
}

function _restws_resource_access($op, $args) {
  $entity_type = $args[0];
  $id = ($op != 'create' && isset($args[1])) ? $args[1] : NULL;
  $value = isset($id) ? entity_metadata_wrapper($entity_type, $id)->value() : NULL;
  return entity_access($op, $entity_type, $value);
}

function _restws_resource_retrieve($entity_type, $id) {
  $wrapper = entity_metadata_wrapper($entity_type, $id);
  return _restws_resource_get_data($wrapper);
}

function _restws_resource_create($entity_type, $values) {
  $entity = entity_property_values_create_entity($entity_type, $values);
  $entity->save();
  $id = $entity->getIdentifier();
  return restws_resource_reference($entity_type, $id);
}

function _restws_resource_update($entity_type, $id, $values) {
  $wrapper = entity_metadata_wrapper($entity_type, $id);
  foreach ($values as $name => $value) {
    $wrapper->{$name}->set($value);
  }
  $wrapper->save();
}

function _restws_resource_delete($entity_type, $id) {
  entity_delete($entity_type, $id);
}


function _restws_resource_get_data($wrapper) {
  $data = array();
  foreach ($wrapper as $name => $property) {
    try {
      if ($property instanceof EntityDrupalWrapper) {
        // For referenced entities only return the URI.
        if ($id = $property->getIdentifier()) {
          $data[$name] = restws_resource_reference($property->type(), $id);
        }
      }
      elseif ($property instanceof EntityValueWrapper) {
        $data[$name] = $property->value();
      }
      elseif ($property instanceof EntityListWrapper || $property instanceof EntityStructureWrapper) {
        $data[$name] = _restws_resource_get_data($property);
      }
    }
    catch (EntityMetadataWrapperException $e) {
      // A property causes problems - ignore that.
    }
  }
  return $data;
}

/**
 * Implements hook_menu_alter().
 */
function restws_menu_alter(&$items) {
  foreach (entity_get_info() as $entity_type => $info) {
    // @todo document 'menu path'
    $menu_path = $entity_type . '/%' . $entity_type;
    if (isset($items[$menu_path])) {
      // Preprend the page callback and the resource to the page arguments.
      array_unshift($items[$menu_path]['page arguments'], $entity_type, $items[$menu_path]['page callback']);
      $items[$menu_path]['page callback'] = 'restws_page_callback';
    }
    else {
      $items[$menu_path] = array(
        'page callback' => 'restws_page_callback',
        'page arguments' => array($entity_type),
        'access callback' => TRUE,
      );
    }
    // Resource base path (e.g. /node or /user) for creating resources.
    // @todo fix 'menu path'
    if (isset($items[$entity_type])) {
      // Preprend the page callback and the resource to the page arguments.
      if (!isset($items[$entity_type]['page arguments'])) {
        $items[$entity_type]['page arguments'] = array();
      }
      array_unshift($items[$entity_type]['page arguments'], $entity_type, $items[$entity_type]['page callback']);
      $items[$entity_type]['page callback'] = 'restws_page_callback';
    }
    else {
      $items[$entity_type] = array(
        'page callback' => 'restws_page_callback',
        'page arguments' => array($entity_type),
        'access callback' => TRUE,
      );
    }
  }
}

/**
 * Menu page callback.
 */
function restws_page_callback($entity_type, $page_callback = NULL) {
  $id_arg = arg(1);

  // Check for a appended .format string.
  if (strpos($id_arg, '.') !== FALSE) {
    menu_set_active_item('restws/' . $_GET['q']);
    return menu_execute_active_handler(NULL, FALSE);
  }
  else if (isset($page_callback)) {
    // Further page callback arguments have been appended to our arguments.
    $args = func_get_args();
    return call_user_func_array($page_callback, array_slice($args, 2));
  }
  else {
    drupal_not_found();
  }
}

/**
 * Returns the URI used for the given resource.
 */
function restws_resource_uri($resource, $id) {
  // Avoid having the URLs aliased.
  return url($resource . '/' . $id, array('absolute' => TRUE, 'alias' => TRUE));
}

/**
 * Returns an array representing a reference on the given resource. To ease
 * usage, we provide the full URI as well as the resource and its id separately.
 */
function restws_resource_reference($resource, $id) {
  return array(
    'uri' => restws_resource_uri($resource, $id),
    'id' => $id,
    'resource' => $resource,
  );
}
